/* Objectives:
1. Identify the basic components of Java programs
2. Write simple Java programs
3. Describe the difference between object declaration and object creation
4. Describe the process of creating and running Java programs
5. Use the Date, SimpleDataFormat, String, and Scanner classes from the standard Java packages
6. Develop Java programs, using the incremental development approach

2.1 The First Java Program
 Chapter 2 Sample program: Displaying a Window File: Ch2Sample1.Java
*/
package procedural_course;
import javax.swing.*;
class ch2Sample1 {
	public static void main(String[] args) {
		JFrame myWindow;
		myWindow = new JFrame();
		myWindow.setSize(300, 200);
		myWindow.setTitle("My First Java Program");
		myWindow.setVisible(true);

	}	
}
/* 
This program declares one class called Ch2Sample1, and the class includes one method called main. From this main method, the Ch2Sample1 class creates and uses
a JFrame object named myWindow by sending the three messages setSize, setTitle, and setVisible to the object. 
=> The JFrame class is one of many classes that come with the Java system. 
=> An instance of this JFrame class is used to represent a single window on the computer screen. 

Programmer/user-defined classes => classes programmers define
Standard classes => predefined classes that come with Java system.

program Diagram => expressing programs visually
Dependency Relationship => drawing arrow to show relationship

To use an object in a program, first we declare and create an object, and then we send messages to it.

Object Declaration
Every object we use in a program must be declared. An object declaration designates the name of an object and the class to which the object belongs. 
Its syntax:
<class name> <object name>
The class must be defined beforehand.
To declare an object as an instance of some class, the class must be defined already. 

Identifier
When we declare an object, we must give it a name. Any valid identifier that is not reserved for other uses can be used as an object name.
A Java identifier is a sequence of letters, digits, underscores, and dollar signs with the firstone being a nondigit.
We use an identifier to name a class, object, method, and others.


Standard Naming convention

We follow the Java standard naming convention of using an uppercase letter for the first letter of the class names and a lowercase letter for the first of the object names.
It is important to follow the standard naming convention so others who read your program can easily distinguish the purposes of identifiers.
Porgrams that follow the standard naming convention are easier to read than those that do not.
And remember that software maintenance is easier with easy-to-understand programs.

=> Follow the standard naming convention in writing your Java programs to make them easier to read.

Object Creation
No object is actually created by the declaration. An object declaration simply declares the name (identifier) that we use to refer to an object.

We create an object by invoking the new operator. (constructor)?

Instead of writing statements for object declaration and creation separately, we can combine them into one statement.

Student John = new Student();

Remember that when an object is created, a certain amount of memory space is allocated for storing this object. 
If this allocated but unused space is not returned to the system for other uses, the space gets wasted. 
This returning of space to the system is called deallocation, and the mechanism to deallocate unused space is called garbage collection.

Message Sending

After the object is created, we can start sending messages to it. The syntax:
<object name>.<method name>(<arguments>);

Object Name
Name of the object to which we are sending a message

Method Name
The name of the message we are sending 

Argument
The argument we are passing with the message

The expression calling object O's method M is synonymous with sending message M to object O. 

2.2 Program Components
A Java program is composed of comments, import statements, and class declarations. 

Comments
=> In addition to the instructions for computers to follow, programs contain comments in which we state the purpose of the program, 
explain the meaning of code, and provide any other descriptions to help programmers understand the program. 

Although not required to run the program, comments are indispensable in writing easy-to-understand code.



//single line comment

/*
multiple
lines 
comment
*/

javadoc comment

=> 
Always aim for self explanatory code. Do not attempt to make poorly written code easier to read by comments.
Good comments are not a substitute for good code. Bad code is bad, no matter how well your comments are written.




2.3 Edit - Compile - Rune Cycle
Step 1
Source file
=> The file in which the program is in a human readable form is called source file.

step 2

Project file
=> Compile the source file. Many compilers require you to create a project file and then place the source file in the project file in order to compile the source file.
=> When the compilation is successful, the compiled version of the source file is created. This compiled version is called bytecode,
and the file that contains bytecode is called a bytecode file. The name of the compiler-generated bytecode file will have the suffix .class while
its prefix is the same as the one for the source file.

Compilation error
=> Errors detected by the compiler are called compilation errors. Most compilation errors are due to the violation of syntax rules. 

Step 3

Execute the bytecode file
A Java interpreter will go through the bytecode file and execute the instructions in it. 
If your program is error-free, a window will appear on the screen (notice the code at the beginning of this note.)

Execution Error
If an error occurs in running the program, the interpreter will catch it and stop its execution. 
Errors detected by the interpreter are called execution errors. 

A Java interpreter is also called a Java Virtual Machine (JVM) because it is like a virtual machine that executes bytecode, 
whereas a CPU is a real machine that executes machine code.

2.4 Sample Java Standard Classes

Eventually, you must learn how to define your own classes from which you create many instances. But first you will need to master existing standard classes. 

Remember:
To become a good object-oriented programmer, first you must learn how to use predefined classes.

2.4.1 Standard output

When a program computes a result, we need a way to display this result to the user of the program. 
One of the most common ways to do this in Java is to use the console window. The console window is also called the Standard output window. 

System.out

We output data such as the computation results or messages to the console window via System.out. 
The System class includes a number of useful class data values. One is an instance of the PrintStream class named out. 
Every data item we send to System.out will appear on this console window.

Standard output
We call the technique to output data by using System.out the Standard output.

eg.
System.out.print("Hellow World!");

System.out refers to a PrintStream object we use to output data to the console window. The actual appearance of the console window depends on which Java tool we use.

2.4.2 String

The textual values we passed to the print method or the constructor of the JFrame class are instances of the String class. 
=> A sequence of characters separated by double quotes is String constants. As String is a class, we can create an instance and give it a name. 

eg.
String myName = new String("Samuel Desalegn");

=> There are close to 50 methods defined in the String class. 

substring
=> We can extract a substring from a given string by specifying the beginning and ending positions. 
String text = "Espresso";

System.out.print(text.substring(2, 7)); // press

Method composition
=> Notice the use of method composition in the last statement, where the result of a method call is used as an argument in another method call. 

length

=> We can find out the number of characters in a String object by using the length method. 
text.length()

indexOf

To locate the index position of a substring within another string, we use the indexOf method.
Java is case sensitive and also the first appearance of a substring is considered.

Signature => 
The method substring() comes with two signatures. If we pass the beginIndex and the endIndex to the method, 
then it obtains a part of a String given the starting index and the length of the result. We can also pass 
the beginIndex only and obtain the part of the String from the beginIndex to the end of the String.

String concatenation 

Beyond the three methods we cover here and the remaining methods of the String class, 
we have one very useful string operation in Java called string concatenation. 

2.4.3 Date and SimpleDateFormat

The date class is used to represent a time instance to a millisecond precision. This class is in the java.util package. 
When a new Date object is created, it is set to the time it is created.
(The current time is determined by reading the time maintained by the operating system on your machine)
The Date class includes the toString method that converts its internal format to a string representation, which we can use to display the time.

Date today = new Date();
System.out.println(today.toString()); 

 SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd, yyyy");
SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/yy");

String cDate = sdf.format(today);
System.out.println(cDate);

Local Date = Current Date
LOcalDare d1 = LocalDate.now();
System.out.println(d1);

//How to set a new Date

LocalDate doj = LocalDate.of(2014, 5, 1);
System.out.println(doj);




2.4.4 Standard Input

Analogous to System.out, we have System.in for input. We call the technique to input data using System.in Standard input. 
System.in accepts input from the keyboard. We also use the term console input to refer to standard input. 
System.in is an instance of the inputStream class that provides only a facility to input 1 byte at a time with its read method.

However, multiple bytes are required to represent common types of data such as strings. The Scanner class from the java.util package provides
a necessary input facility to accommodate various input routines. 

import java.util.*;
Scanner sc = new Scanner(System.in);
String fName = Sc.next(); //next for without any space
nextLine() // until pressing the enter

echo printing
Printing out the values just entered 
The string input is processed until the Enter (or Return) key pressed, so we can erase the characters by pressing the backspace key while entering the data. 

Instead of treating each word individually, it is possible to enter a set of words as a single input. To do so, we must reset the delimiter to other than the blank space.
Any character can be set as a delimiter, but since we want to input the whole line as a single input, it is most reasonable to set the delimiter to the Enter key.

Scanner sc = new Scanner(System.in);

String lineSeparator = System.getProperty("line.separator");
sc.useDelimiter(lineSeparator);
System.out.println("Enter your favorite quote: ");
String quote = sc.next();

System.out.println("You entered: " + quote);

We override the default delimiter by calling the useDelimiter method and passing the appropriate argument. 
We use the class method getProperty of the System class to retrieve the actual sequence of characters for the Enter key that is specific to the platform
which our program is running. 

2.5 Sample Development

Printing the Initials
Problem Statement
=> Write an application that asks for the user's first, middle, and last names and replies with the user's initials.

Overall plan
=> Our first task is to map out the overall plan for development. We will identify classes necessary for the program and the steps we will follow to implement the program.
We begin with the outline of program logic. 

Program tasks:
1. Get the user's first, middle, and last names
2. Exact the initials to formualte the monogram
3. Output the monogram 

Having identified the three major tasks of the program, we will now identify the classes we can use to implement the three tasks. 
First, we need an object to handle the input. At this point, we have learned about only the Scanner class. Second, we need an object to display the result. 

=> We develop programs for the sake of users, not for ourselves. Ease of use has high priority than ease of development.

Step 1 code
Let's implement the second design alternative. In the code, notice the use of the output statement that prints the string entered by the user. 

step 1 test
After the program is written, we test the program to verify that the program runs as intended. 
The step 1 program may seem so trivial and not so useful, but it does serve a very useful purpose. 
Successful execution of this program verifies that the program setup is okay, the necessary packages are imported, 
and the objects are declared correctly. 

Step 2 Computing and Displaying the Monogram

The next task is to extract initials from the input string. 
First, because of our limited knowledge of programming at this point, we will assume the input is correct. 

The next task is to extract initials from the input string. First, because of the our limited know



Summary:
=> The three basic components of a Java program are comments, import statements, and class declarations
=> A Java program must have one class designated as the main class. The designated main class must have the main method
=> An object must be declared and created before we can use it.
=> To command an object or a class to perform a task, we send a message to it. We use the expression calling a method synonymously with sending a message. 
=> A single name can be used to refer to different objects (of the same class) at different times. An object with no reference will be returned to a system.
=> We follow the edit-compile-run cycle to execute programs.
=> A source file is compiled into a bytecode file by a Java compiler
=> A Java interpreter (aka JVM) executes the bytecode


Standard Naming convention

1. Class
Use an uppercase letter for the first letter of the class names

2. Instance 
Use a lowercase letter for the first letter of the object name, and camelCase if more than one word.

3. Constant

Use all uppercase letters, and if there are multiple words, use underscore between words.

4. Package

Use all lowercase letters.






























*/
